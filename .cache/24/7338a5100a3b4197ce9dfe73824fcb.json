{"id":"node_modules/ramda/es/union.js","dependencies":[{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\package.json","includedInParent":true,"mtime":1625666853822},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\.babelrc","includedInParent":true,"mtime":1625398624876},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_concat.js","loc":{"line":1,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\union.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_concat.js"},{"name":"./internal/_curry2.js","loc":{"line":2,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\union.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_curry2.js"},{"name":"./compose.js","loc":{"line":3,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\union.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\compose.js"},{"name":"./uniq.js","loc":{"line":4,"column":17},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\union.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\uniq.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _concat2 = _interopRequireDefault(require(\"./internal/_concat.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nvar _compose = _interopRequireDefault(require(\"./compose.js\"));\n\nvar _uniq = _interopRequireDefault(require(\"./uniq.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\nvar union = /*#__PURE__*/(0, _curry.default)( /*#__PURE__*/(0, _compose.default)(_uniq.default, _concat2.default));\nvar _default = union;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":4,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":5,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":6,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":7,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":8,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":9,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":10,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":11,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":12,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":13,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":14,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":15,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":16,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":17,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":18,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":19,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":20,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":21,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/union.js","original":{"line":23,"column":0}},{"name":"union","generated":{"line":35,"column":4},"source":"node_modules/ramda/es/union.js","original":{"line":23,"column":4}},{"generated":{"line":35,"column":9},"source":"node_modules/ramda/es/union.js","original":{"line":23,"column":9}},{"generated":{"line":35,"column":12},"source":"node_modules/ramda/es/union.js","original":{"line":24,"column":0}},{"generated":{"line":35,"column":25},"source":"node_modules/ramda/es/union.js","original":{"line":25,"column":0}},{"generated":{"line":35,"column":46},"source":"node_modules/ramda/es/union.js","original":{"line":26,"column":0}},{"generated":{"line":35,"column":59},"source":"node_modules/ramda/es/union.js","original":{"line":27,"column":0}},{"name":"uniq","generated":{"line":35,"column":81},"source":"node_modules/ramda/es/union.js","original":{"line":27,"column":8}},{"generated":{"line":35,"column":94},"source":"node_modules/ramda/es/union.js","original":{"line":27,"column":0}},{"name":"_concat","generated":{"line":35,"column":96},"source":"node_modules/ramda/es/union.js","original":{"line":27,"column":14}},{"generated":{"line":35,"column":112},"source":"node_modules/ramda/es/union.js","original":{"line":27,"column":0}},{"generated":{"line":35,"column":113},"source":"node_modules/ramda/es/union.js","original":{"line":25,"column":0}},{"generated":{"line":35,"column":114},"source":"node_modules/ramda/es/union.js","original":{"line":23,"column":0}},{"name":"union","generated":{"line":36,"column":15},"source":"node_modules/ramda/es/union.js","original":{"line":29,"column":15}}],"sources":{"node_modules/ramda/es/union.js":"import _concat from \"./internal/_concat.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport compose from \"./compose.js\";\nimport uniq from \"./uniq.js\";\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig [*] -> [*] -> [*]\n * @param {Array} as The first list.\n * @param {Array} bs The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @example\n *\n *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n */\n\nvar union =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\ncompose(uniq, _concat));\n\nexport default union;"},"lineCount":null}},"error":null,"hash":"f12a92b77a370160b99c2653769d434e","cacheData":{"env":{}}}