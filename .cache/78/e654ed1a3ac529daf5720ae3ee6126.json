{"id":"node_modules/ramda/es/init.js","dependencies":[{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\package.json","includedInParent":true,"mtime":1625666853822},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\.babelrc","includedInParent":true,"mtime":1625398624876},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":499162500000},{"name":"./slice.js","loc":{"line":1,"column":18},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\init.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\slice.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _slice = _interopRequireDefault(require(\"./slice.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\nvar init = /*#__PURE__*/(0, _slice.default)(0, -1);\nvar _default = init;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":1,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":2,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":3,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":4,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":5,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":6,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":7,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":8,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":9,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":10,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":11,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":12,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":13,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":14,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":15,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":16,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":17,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":18,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":19,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":20,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":21,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":22,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":23,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":24,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":25,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/init.js","original":{"line":27,"column":0}},{"name":"init","generated":{"line":36,"column":4},"source":"node_modules/ramda/es/init.js","original":{"line":27,"column":4}},{"generated":{"line":36,"column":8},"source":"node_modules/ramda/es/init.js","original":{"line":27,"column":8}},{"generated":{"line":36,"column":11},"source":"node_modules/ramda/es/init.js","original":{"line":28,"column":0}},{"generated":{"line":36,"column":24},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":44},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":6}},{"generated":{"line":36,"column":45},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":47},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":9}},{"generated":{"line":36,"column":48},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":10}},{"generated":{"line":36,"column":49},"source":"node_modules/ramda/es/init.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":50},"source":"node_modules/ramda/es/init.js","original":{"line":27,"column":0}},{"name":"init","generated":{"line":37,"column":15},"source":"node_modules/ramda/es/init.js","original":{"line":30,"column":15}}],"sources":{"node_modules/ramda/es/init.js":"import slice from \"./slice.js\";\n/**\n * Returns all but the last element of the given list or string.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.last, R.head, R.tail\n * @example\n *\n *      R.init([1, 2, 3]);  //=> [1, 2]\n *      R.init([1, 2]);     //=> [1]\n *      R.init([1]);        //=> []\n *      R.init([]);         //=> []\n *\n *      R.init('abc');  //=> 'ab'\n *      R.init('ab');   //=> 'a'\n *      R.init('a');    //=> ''\n *      R.init('');     //=> ''\n */\n\nvar init =\n/*#__PURE__*/\nslice(0, -1);\nexport default init;"},"lineCount":null}},"error":null,"hash":"8832917865f566b2be0f8ffa0b1ac2a3","cacheData":{"env":{}}}