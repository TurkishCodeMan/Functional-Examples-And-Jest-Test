{"id":"node_modules/ramda/es/unionWith.js","dependencies":[{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\package.json","includedInParent":true,"mtime":1625666853822},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\.babelrc","includedInParent":true,"mtime":1625398624876},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_concat.js","loc":{"line":1,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_concat.js"},{"name":"./internal/_curry3.js","loc":{"line":2,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_curry3.js"},{"name":"./uniqWith.js","loc":{"line":3,"column":21},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\unionWith.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\uniqWith.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _concat2 = _interopRequireDefault(require(\"./internal/_concat.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry3.js\"));\n\nvar _uniqWith = _interopRequireDefault(require(\"./uniqWith.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\nvar unionWith = /*#__PURE__*/(0, _curry.default)(function unionWith(pred, list1, list2) {\n  return (0, _uniqWith.default)(pred, (0, _concat2.default)(list1, list2));\n});\nvar _default = unionWith;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":2,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":3,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":4,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":5,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":6,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":7,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":8,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":9,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":10,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":11,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":12,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":13,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":14,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":15,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":16,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":17,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":18,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":19,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":20,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":21,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":22,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":23,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":24,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":25,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":27,"column":0}},{"name":"unionWith","generated":{"line":38,"column":4},"source":"node_modules/ramda/es/unionWith.js","original":{"line":27,"column":4}},{"generated":{"line":38,"column":13},"source":"node_modules/ramda/es/unionWith.js","original":{"line":27,"column":13}},{"generated":{"line":38,"column":16},"source":"node_modules/ramda/es/unionWith.js","original":{"line":28,"column":0}},{"generated":{"line":38,"column":29},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":0}},{"generated":{"line":38,"column":49},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":8}},{"name":"unionWith","generated":{"line":38,"column":58},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":17}},{"generated":{"line":38,"column":67},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":8}},{"name":"pred","generated":{"line":38,"column":68},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":27}},{"generated":{"line":38,"column":72},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":8}},{"name":"list1","generated":{"line":38,"column":74},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":33}},{"generated":{"line":38,"column":79},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":8}},{"name":"list2","generated":{"line":38,"column":81},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":40}},{"generated":{"line":38,"column":86},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":8}},{"generated":{"line":38,"column":88},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":47}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":2}},{"generated":{"line":39,"column":9},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":9}},{"name":"pred","generated":{"line":39,"column":32},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":18}},{"generated":{"line":39,"column":36},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":9}},{"generated":{"line":39,"column":38},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":24}},{"name":"list1","generated":{"line":39,"column":60},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":32}},{"generated":{"line":39,"column":65},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":24}},{"name":"list2","generated":{"line":39,"column":67},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":39}},{"generated":{"line":39,"column":72},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":24}},{"generated":{"line":39,"column":73},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":9}},{"generated":{"line":39,"column":74},"source":"node_modules/ramda/es/unionWith.js","original":{"line":30,"column":2}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/unionWith.js","original":{"line":31,"column":1}},{"generated":{"line":40,"column":1},"source":"node_modules/ramda/es/unionWith.js","original":{"line":29,"column":0}},{"generated":{"line":40,"column":2},"source":"node_modules/ramda/es/unionWith.js","original":{"line":27,"column":0}},{"name":"unionWith","generated":{"line":41,"column":15},"source":"node_modules/ramda/es/unionWith.js","original":{"line":33,"column":15}}],"sources":{"node_modules/ramda/es/unionWith.js":"import _concat from \"./internal/_concat.js\";\nimport _curry3 from \"./internal/_curry3.js\";\nimport uniqWith from \"./uniqWith.js\";\n/**\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\n * of each list. Duplication is determined according to the value returned by\n * applying the supplied predicate to two list elements.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\n * @param {Function} pred A predicate used to test whether two items are equal.\n * @param {Array} list1 The first list.\n * @param {Array} list2 The second list.\n * @return {Array} The first and second lists concatenated, with\n *         duplicates removed.\n * @see R.union\n * @example\n *\n *      const l1 = [{a: 1}, {a: 2}];\n *      const l2 = [{a: 1}, {a: 4}];\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n */\n\nvar unionWith =\n/*#__PURE__*/\n_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n\nexport default unionWith;"},"lineCount":null}},"error":null,"hash":"524467f91612f3ce725860d7c4f2a457","cacheData":{"env":{}}}