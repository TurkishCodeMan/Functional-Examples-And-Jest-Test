{"id":"node_modules/ramda/es/forEach.js","dependencies":[{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\package.json","includedInParent":true,"mtime":1625419020183},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\.babelrc","includedInParent":true,"mtime":1625398624876},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":499162500000},{"name":"./internal/_checkForMethod.js","loc":{"line":1,"column":28},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\forEach.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_checkForMethod.js"},{"name":"./internal/_curry2.js","loc":{"line":2,"column":20},"parent":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\forEach.js","resolved":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\es\\internal\\_curry2.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _checkForMethod2 = _interopRequireDefault(require(\"./internal/_checkForMethod.js\"));\n\nvar _curry = _interopRequireDefault(require(\"./internal/_curry2.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\nvar forEach = /*#__PURE__*/(0, _curry.default)( /*#__PURE__*/(0, _checkForMethod2.default)('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\nvar _default = forEach;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":2,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":3,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":4,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":5,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":6,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":7,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":8,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":9,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":10,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":11,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":12,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":13,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":14,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":15,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":16,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":17,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":18,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":19,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":20,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":21,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":22,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":23,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":24,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":25,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":26,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":27,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":28,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":29,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":30,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":31,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":32,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":33,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":34,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":35,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":36,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":38,"column":0}},{"name":"forEach","generated":{"line":48,"column":4},"source":"node_modules/ramda/es/forEach.js","original":{"line":38,"column":4}},{"generated":{"line":48,"column":11},"source":"node_modules/ramda/es/forEach.js","original":{"line":38,"column":11}},{"generated":{"line":48,"column":14},"source":"node_modules/ramda/es/forEach.js","original":{"line":39,"column":0}},{"generated":{"line":48,"column":27},"source":"node_modules/ramda/es/forEach.js","original":{"line":40,"column":0}},{"generated":{"line":48,"column":48},"source":"node_modules/ramda/es/forEach.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":61},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":0}},{"generated":{"line":48,"column":91},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":16}},{"generated":{"line":48,"column":100},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":0}},{"generated":{"line":48,"column":102},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":27}},{"name":"forEach","generated":{"line":48,"column":111},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":36}},{"generated":{"line":48,"column":118},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":27}},{"name":"fn","generated":{"line":48,"column":119},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":44}},{"generated":{"line":48,"column":121},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":27}},{"name":"list","generated":{"line":48,"column":123},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":48}},{"generated":{"line":48,"column":127},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":27}},{"generated":{"line":48,"column":129},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":54}},{"generated":{"line":49,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":2}},{"name":"len","generated":{"line":49,"column":6},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":6}},{"generated":{"line":49,"column":9},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":9}},{"name":"list","generated":{"line":49,"column":12},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":12}},{"generated":{"line":49,"column":16},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":16}},{"name":"length","generated":{"line":49,"column":17},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":17}},{"generated":{"line":49,"column":23},"source":"node_modules/ramda/es/forEach.js","original":{"line":43,"column":2}},{"generated":{"line":50,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":44,"column":2}},{"name":"idx","generated":{"line":50,"column":6},"source":"node_modules/ramda/es/forEach.js","original":{"line":44,"column":6}},{"generated":{"line":50,"column":9},"source":"node_modules/ramda/es/forEach.js","original":{"line":44,"column":9}},{"generated":{"line":50,"column":12},"source":"node_modules/ramda/es/forEach.js","original":{"line":44,"column":12}},{"generated":{"line":50,"column":13},"source":"node_modules/ramda/es/forEach.js","original":{"line":44,"column":2}},{"generated":{"line":52,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":2}},{"name":"idx","generated":{"line":52,"column":9},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":9}},{"generated":{"line":52,"column":12},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":12}},{"name":"len","generated":{"line":52,"column":15},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":15}},{"generated":{"line":52,"column":18},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":2}},{"generated":{"line":52,"column":20},"source":"node_modules/ramda/es/forEach.js","original":{"line":46,"column":20}},{"name":"fn","generated":{"line":53,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":4}},{"name":"fn","generated":{"line":53,"column":4},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":4}},{"generated":{"line":53,"column":6},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":6}},{"name":"list","generated":{"line":53,"column":7},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":7}},{"generated":{"line":53,"column":11},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":11}},{"name":"idx","generated":{"line":53,"column":12},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":12}},{"generated":{"line":53,"column":15},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":11}},{"generated":{"line":53,"column":16},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":6}},{"generated":{"line":53,"column":17},"source":"node_modules/ramda/es/forEach.js","original":{"line":47,"column":4}},{"name":"idx","generated":{"line":54,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":48,"column":4}},{"name":"idx","generated":{"line":54,"column":4},"source":"node_modules/ramda/es/forEach.js","original":{"line":48,"column":4}},{"generated":{"line":54,"column":7},"source":"node_modules/ramda/es/forEach.js","original":{"line":48,"column":7}},{"generated":{"line":54,"column":11},"source":"node_modules/ramda/es/forEach.js","original":{"line":48,"column":11}},{"generated":{"line":54,"column":12},"source":"node_modules/ramda/es/forEach.js","original":{"line":48,"column":4}},{"generated":{"line":55,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":49,"column":3}},{"generated":{"line":57,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":51,"column":2}},{"name":"list","generated":{"line":57,"column":9},"source":"node_modules/ramda/es/forEach.js","original":{"line":51,"column":9}},{"generated":{"line":57,"column":13},"source":"node_modules/ramda/es/forEach.js","original":{"line":51,"column":2}},{"generated":{"line":58,"column":0},"source":"node_modules/ramda/es/forEach.js","original":{"line":52,"column":1}},{"generated":{"line":58,"column":1},"source":"node_modules/ramda/es/forEach.js","original":{"line":42,"column":0}},{"generated":{"line":58,"column":2},"source":"node_modules/ramda/es/forEach.js","original":{"line":40,"column":0}},{"generated":{"line":58,"column":3},"source":"node_modules/ramda/es/forEach.js","original":{"line":38,"column":0}},{"name":"forEach","generated":{"line":59,"column":15},"source":"node_modules/ramda/es/forEach.js","original":{"line":54,"column":15}}],"sources":{"node_modules/ramda/es/forEach.js":"import _checkForMethod from \"./internal/_checkForMethod.js\";\nimport _curry2 from \"./internal/_curry2.js\";\n/**\n * Iterate over an input `list`, calling a provided function `fn` for each\n * element in the list.\n *\n * `fn` receives one argument: *(value)*.\n *\n * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.forEach` method. For more\n * details on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n *\n * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n * the original array. In some libraries this function is named `each`.\n *\n * Dispatches to the `forEach` method of the second argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.1\n * @category List\n * @sig (a -> *) -> [a] -> [a]\n * @param {Function} fn The function to invoke. Receives one argument, `value`.\n * @param {Array} list The list to iterate over.\n * @return {Array} The original list.\n * @see R.addIndex\n * @example\n *\n *      const printXPlusFive = x => console.log(x + 5);\n *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n *      // logs 6\n *      // logs 7\n *      // logs 8\n * @symb R.forEach(f, [a, b, c]) = [a, b, c]\n */\n\nvar forEach =\n/*#__PURE__*/\n_curry2(\n/*#__PURE__*/\n_checkForMethod('forEach', function forEach(fn, list) {\n  var len = list.length;\n  var idx = 0;\n\n  while (idx < len) {\n    fn(list[idx]);\n    idx += 1;\n  }\n\n  return list;\n}));\n\nexport default forEach;"},"lineCount":null}},"error":null,"hash":"ce22988b8b25fcf1b98cb7be11a6805d","cacheData":{"env":{}}}