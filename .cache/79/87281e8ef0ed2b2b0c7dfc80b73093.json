{"id":"node_modules/ramda/es/__.js","dependencies":[{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\package.json","includedInParent":true,"mtime":1625419020183},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\.babelrc","includedInParent":true,"mtime":1625398624876},{"name":"E:\\Javascript\\JS-Hard-PartsV2\\brian_functional\\node_modules\\ramda\\package.json","includedInParent":true,"mtime":499162500000}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nvar _default = {\n  '@@functional/placeholder': true\n};\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":1,"column":0}},{"generated":{"line":9,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":2,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":3,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":4,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":5,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":6,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":7,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":8,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":9,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":10,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":11,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":12,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":13,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":14,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":15,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":16,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":17,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":18,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":19,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":20,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":21,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":22,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":23,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":24,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":25,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":26,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":27,"column":0}},{"generated":{"line":35,"column":15},"source":"node_modules/ramda/es/__.js","original":{"line":28,"column":15}},{"generated":{"line":36,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":29,"column":2}},{"generated":{"line":36,"column":30},"source":"node_modules/ramda/es/__.js","original":{"line":29,"column":30}},{"generated":{"line":37,"column":0},"source":"node_modules/ramda/es/__.js","original":{"line":28,"column":15}}],"sources":{"node_modules/ramda/es/__.js":"/**\n * A special placeholder value used to specify \"gaps\" within curried functions,\n * allowing partial application of any combination of arguments, regardless of\n * their positions.\n *\n * If `g` is a curried ternary function and `_` is `R.__`, the following are\n * equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2, _)(1, 3)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @name __\n * @constant\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @example\n *\n *      const greet = R.replace('{name}', R.__, 'Hello, {name}!');\n *      greet('Alice'); //=> 'Hello, Alice!'\n */\nexport default {\n  '@@functional/placeholder': true\n};"},"lineCount":null}},"error":null,"hash":"96bd75f44a2dbc18ea62d5e1880eaf75","cacheData":{"env":{}}}